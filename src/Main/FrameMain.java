/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.net.URL;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luiiz
 */
public  class FrameMain extends javax.swing.JFrame {
public static DefaultTableModel tabla;
public static DefaultListModel model1,model2,model3,model4;
//Variable que controlara el tiempo del cpu que vaya teniendo
public static int tiempo_cpu=0;
//quantum para RR
public static int q=3;
//Variable del hilo que se ejecutara
public static Thread hiloEjecutado=null;
//ArrayList que funcionaran para lleva un mejor control de los procesos 
//ArrayList para almacenar todos los procesos y posteriormente poder hacer las estadisticas 
public static ArrayList<Procesos> procesosEstadisticas=new ArrayList();
//ArrayList que servira para realizar cambios en la tabla sin que haya la necesidad de cambiar las pocisiones
public static ArrayList<Procesos> procesosEnTabla=new ArrayList();
public static ArrayList<Integer> rafagas=new ArrayList();
public static ArrayList<String> nombre=new ArrayList();
public static ArrayList<Float> indicesServicio=new ArrayList();
public static String estGlobales="";
    /**
     * Creates new form FrameMain
     */
    public FrameMain() {
        initComponents();
        //Estas lineas sirven para determinar los modelos de la tabla y de las listas
        String cabecera[]={"Id","Nombre","Tiempo requerido","Prioridad","E/S"};
        String path="/Main/foco a.png";
        URL url=this.getClass().getResource(path);
        ImageIcon icon=new ImageIcon(url);
        foco.setIcon(icon);
        tabla=new DefaultTableModel(null,cabecera);
        //Modelo para la lista de listos
        model1=new DefaultListModel();
        //Modelo para la lista de procesos bloqueados
        model2=new DefaultListModel();
        //Modelo para la lista de procesos suspendidos-listos
        model3=new DefaultListModel();
        //Modelo para la lista de suspendidobloqueado
        model4=new DefaultListModel();
        tabladedatos.setModel(tabla);
        list_listo.setModel(model1);
        list_Bloqueado.setModel(model2);
        list_SuspListo.setModel(model3);
        list_SuspBloqueo.setModel(model4);
        lbl_quantum.setText(""+q);
        btn_reiniciar.setEnabled(false);
        btn_SR.setEnabled(false);
        jButton2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_Bloqueado = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        btn_SR = new javax.swing.JToggleButton();
        btn_est = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Ingreso = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_listo = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        lbl_ejecucion = new javax.swing.JLabel();
        lbl_ejecucion2 = new javax.swing.JLabel();
        lbl_quantum = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        btn_cargarProceso = new javax.swing.JButton();
        btn_reiniciar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_SuspListo = new javax.swing.JList<>();
        btn_ejecutar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        list_SuspBloqueo = new javax.swing.JList<>();
        comboAlgoritmo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        foco = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabladedatos = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportView(list_Bloqueado);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 552, 133, 83));

        jPanel1.setBackground(new java.awt.Color(101, 33, 101));

        btn_SR.setBackground(new java.awt.Color(165, 121, 190));
        btn_SR.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        btn_SR.setText("Detener Simulador");
        btn_SR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btn_SR.setContentAreaFilled(false);
        btn_SR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_SR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SRActionPerformed(evt);
            }
        });

        btn_est.setBackground(new java.awt.Color(165, 121, 190));
        btn_est.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        btn_est.setText("Tabla de informacion");
        btn_est.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btn_est.setContentAreaFilled(false);
        btn_est.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_est.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_estActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        jButton2.setText("Estadisticas Globales");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/ic_stop_black_24dp.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/ic_info_outline_black_24dp.png"))); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/ic_equalizer_black_24dp.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btn_SR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_est, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_SR, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btn_est, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 255, -1, -1));

        jLabel1.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        jLabel1.setText("Opciones de Control");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 230, -1, -1));

        jLabel4.setFont(new java.awt.Font("Roboto Lt", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Bloqueado");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 529, -1, -1));

        Ingreso.setBackground(new java.awt.Color(42, 37, 37));
        Ingreso.setForeground(new java.awt.Color(51, 51, 51));
        Ingreso.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Roboto Lt", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Listo");
        Ingreso.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 40, 20));

        jScrollPane3.setViewportView(list_listo);

        Ingreso.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 130, 90));

        jPanel3.setBackground(new java.awt.Color(101, 33, 101));

        lbl_ejecucion.setBackground(new java.awt.Color(204, 0, 204));
        lbl_ejecucion.setFont(new java.awt.Font("Roboto Lt", 0, 24)); // NOI18N
        lbl_ejecucion.setForeground(new java.awt.Color(0, 255, 0));
        lbl_ejecucion.setText("Ejecucion");

        lbl_ejecucion2.setBackground(new java.awt.Color(204, 0, 204));
        lbl_ejecucion2.setFont(new java.awt.Font("Roboto Lt", 0, 36)); // NOI18N
        lbl_ejecucion2.setForeground(new java.awt.Color(255, 255, 0));

        lbl_quantum.setFont(new java.awt.Font("Roboto Lt", 0, 18)); // NOI18N
        lbl_quantum.setForeground(new java.awt.Color(0, 255, 0));
        lbl_quantum.setText("Quantum");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_ejecucion, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_quantum, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(lbl_ejecucion2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_ejecucion, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_quantum, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_ejecucion2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Ingreso.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, 320, 160));

        jPanel4.setBackground(new java.awt.Color(101, 33, 101));
        jPanel4.setForeground(new java.awt.Color(0, 51, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        Ingreso.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 240, 160));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/ic_add_black_24dp.png"))); // NOI18N
        Ingreso.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 40, 40));

        btn_cargarProceso.setBackground(new java.awt.Color(42, 37, 37));
        btn_cargarProceso.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        btn_cargarProceso.setText("Cargar Proceso");
        btn_cargarProceso.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_cargarProceso.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_cargarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cargarProcesoActionPerformed(evt);
            }
        });
        Ingreso.add(btn_cargarProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 100, 20));

        btn_reiniciar.setBackground(new java.awt.Color(42, 37, 37));
        btn_reiniciar.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        btn_reiniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/ic_cached_black_24dp.png"))); // NOI18N
        btn_reiniciar.setText("Reiniciar");
        btn_reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reiniciarActionPerformed(evt);
            }
        });
        Ingreso.add(btn_reiniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 20, -1, 40));

        jLabel3.setFont(new java.awt.Font("Roboto Lt", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Suspendido Listo");
        Ingreso.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 30, -1, -1));

        jScrollPane2.setViewportView(list_SuspListo);

        Ingreso.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 50, 140, 90));

        btn_ejecutar.setBackground(new java.awt.Color(42, 37, 37));
        btn_ejecutar.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        btn_ejecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/ic_power_settings_new_black_24dp.png"))); // NOI18N
        btn_ejecutar.setText("Iniciar");
        btn_ejecutar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ejecutarActionPerformed(evt);
            }
        });
        Ingreso.add(btn_ejecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 110, 40));

        jLabel5.setFont(new java.awt.Font("Roboto Lt", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Suspendido Bloqueado");
        Ingreso.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 530, -1, -1));

        jScrollPane4.setViewportView(list_SuspBloqueo);

        Ingreso.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 550, 150, 82));

        comboAlgoritmo.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        comboAlgoritmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FIFO", "SJN", "RR", "HRN", "SRT", "Colas Multinivel", "Colas Multinivel con Retroalimentacion" }));
        Ingreso.add(comboAlgoritmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, -1, 20));

        jLabel6.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Algoritmo a ejecutar");
        Ingreso.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        foco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/foco a.png"))); // NOI18N
        foco.setText("jLabel12");
        Ingreso.add(foco, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 260, 210, 150));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/giphy_1.gif"))); // NOI18N
        Ingreso.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, -1, -1));

        getContentPane().add(Ingreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 730));

        jPanel2.setBackground(new java.awt.Color(101, 33, 101));

        tabladedatos.setFont(new java.awt.Font("Roboto Lt", 0, 11)); // NOI18N
        tabladedatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tabladedatos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 0, 710, 730));

        pack();
    }// </editor-fold>//GEN-END:initComponents
String a = "";
//public static es una manera en como es que estas variables pueden ser referenciadas a otras clases
    public static ArrayList<Procesos> procesoslistos = new ArrayList();
    public static Procesos procesoejecutado[] = new Procesos[1];
    int cont=0;
    public static ArrayList<Procesos> procesosbloqueados = new ArrayList();    public static ArrayList<Procesos> procesossuspbloqueados = new ArrayList();    //ArrayList que almacenara los procesos suspendidoslistos asi como las arraylist en cada uno de los estados
    //es de tipo procesos porque es donde se guarada toda la informacion
   public static ArrayList<Procesos> procesosusplistos = new ArrayList();    ArrayList<Procesos> procesossusblobloqueados = new ArrayList();
    private void btn_SRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SRActionPerformed
    if(btn_SR.getText().equals("Detener Simulador")){
      if(hiloEjecutado.isAlive()){
          //Esta linea sirve para hacer que el hilo ejecutado se pueda pausar
          hiloEjecutado.suspend();
          String path="/Main/foco r.png";
        URL url=this.getClass().getResource(path);
        ImageIcon icon=new ImageIcon(url);
        foco.setIcon(icon);
          btn_SR.setText("Reanudar Simulador");
          btn_reiniciar.setEnabled(true);
      }  
    }else{
      if(hiloEjecutado.isAlive()){
          //Esta sirve para reanudar lo que el hilo estaba haciendo
          hiloEjecutado.resume();
          String path="/Main/foco v.png";
        URL url=this.getClass().getResource(path);
        ImageIcon icon=new ImageIcon(url);
        foco.setIcon(icon);
          btn_SR.setText("Detener Simulador");
          btn_reiniciar.setEnabled(false);
      }  
    }             
        
    }//GEN-LAST:event_btn_SRActionPerformed

    
    
    private void btn_estActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_estActionPerformed
        String mensaje1 = "", mensaje2 = "", id = "", fin = "";
        for (int i = 0; i < procesoslistos.size(); i++) {
            fin = "ID               Nombre                Tiempo Rafaga                Prioridad\n";
            id = id + Integer.toString(procesoslistos.get(i).id) + "               " + procesoslistos.get(i).nombre + "              " + Integer.toString(procesoslistos.get(i).rafaga) +"              "+Integer.toString(procesoslistos.get(i).prioridad) +"\n";

        }

        JOptionPane.showMessageDialog(null, fin + id);

    }//GEN-LAST:event_btn_estActionPerformed

    private void btn_ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ejecutarActionPerformed
           //Estas lineas agregan a la lista de listos todos los procesos que existan en el ArrayList procesoslistos
           String path="/Main/foco v.png";
        URL url=this.getClass().getResource(path);
        ImageIcon icon=new ImageIcon(url);
        foco.setIcon(icon);
           btn_ejecutar.setEnabled(false);
           btn_SR.setEnabled(true);
           model1.clear();
           for(int i=0;i<procesoslistos.size();i++){
               model1.addElement(procesoslistos.get(i).nombre);
           }
           String algoritmo=comboAlgoritmo.getSelectedItem().toString();
           switch(algoritmo){
               case "FIFO":
                   //Estas lineas sirven para ejecutar cada uno de los diferentes algoritmos que hay
                   //Los hilos se manejan segun las clases para cada algoritmo
                   hiloEjecutado=new Thread( new algoritmoFIFO());
                   hiloEjecutado.start();
                   break;
               case "SJN":
                   hiloEjecutado=new Thread(new algoritmoSJN());
                   hiloEjecutado.start();
                   break;
               case "RR":
                   hiloEjecutado=new Thread(new algoritmoRR());
                   hiloEjecutado.start();
                   break;
               case "HRN":
                   hiloEjecutado=new Thread(new algoritmoHRN());
                   hiloEjecutado.start();
                   break;
               case "SRT":
                   hiloEjecutado=new Thread(new algoritmoSRT());
                   hiloEjecutado.start();
                   break;
               case "Colas Multinivel":
                   hiloEjecutado=new Thread(new algoritmoColasMultinivel());
                   hiloEjecutado.start();
                   break;
               case "Colas Multinivel con Retroalimentacion":
                   hiloEjecutado=new Thread(new algoritmoColasMultinivelConRetroalimentacion());
                   hiloEjecutado.start();
                   break;
           }
           
    }//GEN-LAST:event_btn_ejecutarActionPerformed

    private void btn_cargarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cargarProcesoActionPerformed
          int op=Integer.parseInt(JOptionPane.showInputDialog("¿Como quieres crear procesos?\n1.-Manualmente\n2.-Aleatorio\n3.-Paquete predefinido de 5 Procesos"));
       switch(op){
           case 1:
               Procesos obj=new Procesos();
               cont++;
               obj.id=cont;
               String nom=JOptionPane.showInputDialog("Ingresa el nombre del proceso");
               obj.pedirNombre(nom);
               int rafaga=Integer.parseInt(JOptionPane.showInputDialog("Ingresa el tiempo requerido"));
               rafagas.add(rafaga);
               obj.pedirRafaga(rafaga);
               Random rnd=new Random();
               int prio=rnd.nextInt(6);
               if(prio==0)
                   prio++;
               obj.prioridad(prio);
               int es=Integer.parseInt(JOptionPane.showInputDialog("¿Utiliza E/S?\n1.-Si\n2.-No"));
               String respuesta="";
               if(es==1){
                  obj.es=true;
                  respuesta="Si";
               }else{
                  obj.es=false;
                  respuesta="No";
               }
                 Object informacionProceso[]={obj.id,obj.nombre,obj.rafaga,obj.prioridad,respuesta};
                 tabla.addRow(informacionProceso);
                 procesoslistos.add(obj);
                 procesosEnTabla.add(obj);
                 procesosEstadisticas.add(obj);
               break;
           case 2:
                int numeroProceso=Integer.parseInt(JOptionPane.showInputDialog("Ingresa el numero de procesos"));
                for(int i=0;i<numeroProceso;i++){
                    Procesos obj1=new Procesos();
                    cont++;
                    obj1.id=cont;
                    obj1.nombre="Proceso "+cont;
                    Random rnd2=new Random();
                    int raf=rnd2.nextInt(16);
                    if(raf==0)
                        raf++;
                   obj1.pedirRafaga(raf);
                    rafagas.add(raf);
                    int prio2=rnd2.nextInt(6);
                    if(prio2==0)
                        prio2++;
                    obj1.prioridad=prio2;
                    boolean r=rnd2.nextBoolean();
                    obj1.es=r;
                    String respuesta2="";
                    if(r==true)
                        respuesta2="Si";
                    else
                        respuesta2="No";
                    Object informacionProceso2[]={obj1.id,obj1.nombre,obj1.rafaga,obj1.prioridad,respuesta2};
                 tabla.addRow(informacionProceso2);
                 procesoslistos.add(obj1);
                 procesosEnTabla.add(obj1);
                 procesosEstadisticas.add(obj1);
                }
               break;
           case 3:
               Procesos p1=new Procesos();
               Procesos p2=new Procesos();
               Procesos p3=new Procesos();
               Procesos p4=new Procesos();
               Procesos p5=new Procesos();
               cont++;
               p1.id=cont;
               p1.nombre="Word";
               p1.rafaga=12;
                rafagas.add(12);
               p1.prioridad=4;
               p1.es=true;
                cont++;
               p2.id=cont;
               p2.nombre="Avast";
               p2.rafaga=14;
                rafagas.add(14);
               p2.prioridad=5;
               p2.es=false;
                cont++;
               p3.id=cont;
               p3.nombre="Opera";
               p3.rafaga=10;
                rafagas.add(10);
               p3.prioridad=3;
               p3.es=true;
               cont++;
               p4.id=cont;
               p4.nombre="KM Player";
               p4.rafaga=10;
                rafagas.add(10);
               p4.prioridad=2;
               p4.es=false;
               cont++;
               p5.id=cont;
               p5.nombre="Paint";
               p5.rafaga=12;
                rafagas.add(12);
               p5.prioridad=1;
               p5.es=true;
               Object informacionP1[]={p1.id,p1.nombre,p1.rafaga,p1.prioridad,"Si"};
               Object informacionP2[]={p2.id,p2.nombre,p2.rafaga,p2.prioridad,"No"};
               Object informacionP3[]={p3.id,p3.nombre,p3.rafaga,p3.prioridad,"Si"};
               Object informacionP4[]={p4.id,p4.nombre,p4.rafaga,p4.prioridad,"No"};
               Object informacionP5[]={p5.id,p5.nombre,p5.rafaga,p5.prioridad,"Si"};
               tabla.addRow(informacionP1);
               tabla.addRow(informacionP2);
               tabla.addRow(informacionP3);
               tabla.addRow(informacionP4);
               tabla.addRow(informacionP5);
               procesoslistos.add(p1);
                 procesosEnTabla.add(p1);
                 procesosEstadisticas.add(p1);
                 
                 procesoslistos.add(p2);
                 procesosEnTabla.add(p2);
                 procesosEstadisticas.add(p2);
                 
                 procesoslistos.add(p3);
                 procesosEnTabla.add(p3);
                 procesosEstadisticas.add(p3);
                 
                 procesoslistos.add(p4);
                 procesosEnTabla.add(p4);
                 procesosEstadisticas.add(p4);
                 
                 procesoslistos.add(p5);
                 procesosEnTabla.add(p5);
                 procesosEstadisticas.add(p5);
               break;
               
       }
    }//GEN-LAST:event_btn_cargarProcesoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       Estadisticas est=new Estadisticas();
       est.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btn_reiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reiniciarActionPerformed
       hiloEjecutado.stop();
       String path="/Main/foco a.png";
        URL url=this.getClass().getResource(path);
        ImageIcon icon=new ImageIcon(url);
        foco.setIcon(icon);
       model1.clear();
       model2.clear();
       model3.clear();
       model4.clear();
       for(int i=0;i<tabla.getRowCount();i++){
           tabla.removeRow(i);
           i-=1;
       }
       procesoslistos.clear();
       procesosEnTabla.clear();
       procesosEstadisticas.clear();
       rafagas.clear();
       procesosbloqueados.clear();
       procesosusplistos.clear();
       procesosbloqueados.clear();
       btn_ejecutar.setEnabled(true);
       btn_reiniciar.setEnabled(false);
       lbl_ejecucion.setText("Ejecucion");
       lbl_ejecucion2.setText("");
       q=3;
       lbl_quantum.setText(""+q);
       tiempo_cpu=0;
    }//GEN-LAST:event_btn_reiniciarActionPerformed
    //Este metodo lo que hace es que va actualizando la tabla para que el tiempo del cpu se vea reflejado en cada uno de los procesos
    public static void actualizartabla(){
        for(int i=0;i<tabla.getRowCount();i++){
            tabla.setValueAt(procesosEnTabla.get(i).id, i, 0);
            tabla.setValueAt(procesosEnTabla.get(i).nombre, i, 1);
            tabla.setValueAt(procesosEnTabla.get(i).rafaga, i, 2);
            tabla.setValueAt(procesosEnTabla.get(i).prioridad, i, 3);
            if(procesosEnTabla.get(i).es==true){
                tabla.setValueAt("Si", i, 4);
            }else{
                tabla.setValueAt("No", i, 4);
            }
            
        }
    }
    //Cuyando un algoritmo termina este metodo es invocado para que el hilo se detenga 
    public static void algoritmoTerminado(){
        
        hiloEjecutado=null;
        btn_SR.setEnabled(false);
        jButton2.setEnabled(true);
        lbl_ejecucion.setText("Ejecucion");
        lbl_ejecucion2.setText("");
        float promedioTS=0,promedioTE=0,promedioI=0;
        JOptionPane.showMessageDialog(null,"Algoritmo terminado");
        String mostrarYa="Nombre                t                       ti                      tf                        T                          E                       I\n";
        for(int i=0;i<procesosEstadisticas.size();i++){
            procesosEstadisticas.get(i).tiempo_de_servicio=procesosEstadisticas.get(i).instante_de_fin-procesosEstadisticas.get(i).instante_de_llegada;
            promedioTS+=procesosEstadisticas.get(i).tiempo_de_servicio;
            procesosEstadisticas.get(i).tiempo_de_espera=procesosEstadisticas.get(i).tiempo_de_servicio-rafagas.get(i);
            if(procesosEstadisticas.get(i).tiempo_de_espera<0){
                procesosEstadisticas.get(i).tiempo_de_espera= procesosEstadisticas.get(i).tiempo_de_espera*-1;
            }
            promedioTE+=procesosEstadisticas.get(i).tiempo_de_espera;
            procesosEstadisticas.get(i).indiceServicio=(float)(rafagas.get(i))/(procesosEstadisticas.get(i).tiempo_de_servicio);
            promedioI+=procesosEstadisticas.get(i).indiceServicio;
            mostrarYa+=procesosEstadisticas.get(i).nombre+"                   "+rafagas.get(i)+"                      "+procesosEstadisticas.get(i).instante_de_llegada+"                     "+procesosEstadisticas.get(i).instante_de_fin+"                     "+procesosEstadisticas.get(i).tiempo_de_servicio+"                      "+procesosEstadisticas.get(i).tiempo_de_espera+"                    "+procesosEstadisticas.get(i).indiceServicio+"\n";
        }
        promedioTS/=(float)procesosEstadisticas.size();
        promedioTE/=(float)procesosEstadisticas.size();
        promedioI/=(float)procesosEstadisticas.size();
        mostrarYa+="                                                         Promedios                   "+promedioTS+"                   "+promedioTE+"                   "+promedioI;
        JOptionPane.showMessageDialog(null,mostrarYa);
        nombre.add(comboAlgoritmo.getSelectedItem().toString());
        indicesServicio.add(promedioI);
        estGlobales+=comboAlgoritmo.getSelectedItem().toString()+"\n\n"+mostrarYa+"\n\n";
       
        model1.clear();
       model2.clear();
       model3.clear();
       model4.clear();
       for(int i=0;i<tabla.getRowCount();i++){
           tabla.removeRow(i);
           i-=1;
       }
       procesoslistos.clear();
       procesosEnTabla.clear();
       procesosEstadisticas.clear();
       rafagas.clear();
       procesosbloqueados.clear();
       procesosusplistos.clear();
       procesosbloqueados.clear();
       btn_ejecutar.setEnabled(true);
       btn_reiniciar.setEnabled(false);
       lbl_ejecucion.setText("Ejecucion");
       lbl_ejecucion2.setText("");
       q=3;
       lbl_quantum.setText(""+q);
       tiempo_cpu=0;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Ingreso;
    public static javax.swing.JToggleButton btn_SR;
    private javax.swing.JButton btn_cargarProceso;
    public static javax.swing.JButton btn_ejecutar;
    private javax.swing.JButton btn_est;
    public static javax.swing.JButton btn_reiniciar;
    public static javax.swing.JComboBox<String> comboAlgoritmo;
    public static javax.swing.JLabel foco;
    public static javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    public static javax.swing.JLabel lbl_ejecucion;
    public static javax.swing.JLabel lbl_ejecucion2;
    public static javax.swing.JLabel lbl_quantum;
    public static javax.swing.JList<String> list_Bloqueado;
    public static javax.swing.JList<String> list_SuspBloqueo;
    public static javax.swing.JList<String> list_SuspListo;
    public static javax.swing.JList<String> list_listo;
    private javax.swing.JTable tabladedatos;
    // End of variables declaration//GEN-END:variables
}
